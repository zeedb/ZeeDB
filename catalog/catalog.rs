use zetasql::*;

pub const ROOT_CATALOG_ID: i64 = 0;

pub fn default_catalog() -> SimpleCatalogProto {
    let mut cat = empty_catalog();
    cat.catalog.push(crate::bootstrap_metadata_catalog());
    cat
}

pub fn empty_catalog() -> SimpleCatalogProto {
    SimpleCatalogProto {
        builtin_function_options: Some(ZetaSqlBuiltinFunctionOptionsProto {
            language_options: Some(LanguageOptionsProto {
                enabled_language_features: enabled_language_features(),
                supported_statement_kinds: supported_statement_kinds(),
                ..Default::default()
            }),
            include_function_ids: enabled_functions(),
            ..Default::default()
        }),
        ..Default::default()
    }
}

pub fn enabled_language_features() -> Vec<i32> {
    vec![
        LanguageFeature::FeatureDisallowGroupByFloat as i32,
        LanguageFeature::FeatureDmlUpdateWithJoin as i32,
        LanguageFeature::FeatureNamedArguments as i32,
        LanguageFeature::FeatureV11SelectStarExceptReplace as i32,
        LanguageFeature::FeatureV12CorrelatedRefsInNestedDml as i32,
        LanguageFeature::FeatureV12WeekWithWeekday as i32,
        LanguageFeature::FeatureV13OmitInsertColumnList as i32,
        LanguageFeature::FeatureV13ConcatMixedTypes as i32,
    ]
}

pub fn supported_statement_kinds() -> Vec<i32> {
    vec![
        ResolvedNodeKind::ResolvedLiteral as i32,
        ResolvedNodeKind::ResolvedParameter as i32,
        ResolvedNodeKind::ResolvedColumnRef as i32,
        ResolvedNodeKind::ResolvedFunctionCall as i32,
        ResolvedNodeKind::ResolvedAggregateFunctionCall as i32,
        ResolvedNodeKind::ResolvedCast as i32,
        ResolvedNodeKind::ResolvedSubqueryExpr as i32,
        ResolvedNodeKind::ResolvedSingleRowScan as i32,
        ResolvedNodeKind::ResolvedTableScan as i32,
        ResolvedNodeKind::ResolvedJoinScan as i32,
        ResolvedNodeKind::ResolvedFilterScan as i32,
        ResolvedNodeKind::ResolvedAggregateScan as i32,
        ResolvedNodeKind::ResolvedSetOperationItem as i32,
        ResolvedNodeKind::ResolvedSetOperationScan as i32,
        ResolvedNodeKind::ResolvedOrderByScan as i32,
        ResolvedNodeKind::ResolvedLimitOffsetScan as i32,
        ResolvedNodeKind::ResolvedWithRefScan as i32,
        ResolvedNodeKind::ResolvedComputedColumn as i32,
        ResolvedNodeKind::ResolvedOrderByItem as i32,
        ResolvedNodeKind::ResolvedColumnDefinition as i32,
        ResolvedNodeKind::ResolvedOutputColumn as i32,
        ResolvedNodeKind::ResolvedProjectScan as i32,
        ResolvedNodeKind::ResolvedQueryStmt as i32,
        ResolvedNodeKind::ResolvedCreateDatabaseStmt as i32,
        ResolvedNodeKind::ResolvedIndexItem as i32,
        ResolvedNodeKind::ResolvedCreateIndexStmt as i32,
        ResolvedNodeKind::ResolvedCreateSchemaStmt as i32,
        ResolvedNodeKind::ResolvedCreateTableStmt as i32,
        ResolvedNodeKind::ResolvedDropStmt as i32,
        ResolvedNodeKind::ResolvedWithScan as i32,
        ResolvedNodeKind::ResolvedWithEntry as i32,
        ResolvedNodeKind::ResolvedDmlvalue as i32,
        ResolvedNodeKind::ResolvedInsertRow as i32,
        ResolvedNodeKind::ResolvedInsertStmt as i32,
        ResolvedNodeKind::ResolvedDeleteStmt as i32,
        ResolvedNodeKind::ResolvedUpdateItem as i32,
        ResolvedNodeKind::ResolvedUpdateStmt as i32,
        ResolvedNodeKind::ResolvedCallStmt as i32,
        ResolvedNodeKind::ResolvedAggregateHavingModifier as i32,
        ResolvedNodeKind::ResolvedSingleAssignmentStmt as i32,
        ResolvedNodeKind::ResolvedExplainStmt as i32,
    ]
}

pub fn enabled_functions() -> Vec<i32> {
    vec![
        // Elementary math functions
        FunctionSignatureId::FnAddDouble as i32,
        FunctionSignatureId::FnAddInt64 as i32,
        FunctionSignatureId::FnSubtractDouble as i32,
        FunctionSignatureId::FnSubtractInt64 as i32,
        FunctionSignatureId::FnMultiplyDouble as i32,
        FunctionSignatureId::FnMultiplyInt64 as i32,
        FunctionSignatureId::FnDivideDouble as i32,
        FunctionSignatureId::FnUnaryMinusInt64 as i32,
        FunctionSignatureId::FnUnaryMinusDouble as i32,
        // Math functions
        FunctionSignatureId::FnAbsInt64 as i32,
        FunctionSignatureId::FnAbsDouble as i32,
        FunctionSignatureId::FnSignInt64 as i32,
        FunctionSignatureId::FnSignDouble as i32,
        FunctionSignatureId::FnRoundDouble as i32,
        FunctionSignatureId::FnRoundWithDigitsDouble as i32,
        FunctionSignatureId::FnTruncDouble as i32,
        FunctionSignatureId::FnTruncWithDigitsDouble as i32,
        FunctionSignatureId::FnCeilDouble as i32,
        FunctionSignatureId::FnFloorDouble as i32,
        FunctionSignatureId::FnModInt64 as i32,
        FunctionSignatureId::FnDivInt64 as i32,
        FunctionSignatureId::FnIsInf as i32,
        FunctionSignatureId::FnIsNan as i32,
        FunctionSignatureId::FnGreatest as i32,
        FunctionSignatureId::FnLeast as i32,
        FunctionSignatureId::FnSqrtDouble as i32,
        FunctionSignatureId::FnPowDouble as i32,
        FunctionSignatureId::FnExpDouble as i32,
        FunctionSignatureId::FnNaturalLogarithmDouble as i32,
        FunctionSignatureId::FnDecimalLogarithmDouble as i32,
        FunctionSignatureId::FnLogarithmDouble as i32,
        FunctionSignatureId::FnCosDouble as i32,
        FunctionSignatureId::FnCoshDouble as i32,
        FunctionSignatureId::FnAcosDouble as i32,
        FunctionSignatureId::FnAcoshDouble as i32,
        FunctionSignatureId::FnSinDouble as i32,
        FunctionSignatureId::FnSinhDouble as i32,
        FunctionSignatureId::FnAsinDouble as i32,
        FunctionSignatureId::FnAsinhDouble as i32,
        FunctionSignatureId::FnTanDouble as i32,
        FunctionSignatureId::FnTanhDouble as i32,
        FunctionSignatureId::FnAtanDouble as i32,
        FunctionSignatureId::FnAtanhDouble as i32,
        FunctionSignatureId::FnAtan2Double as i32,
        // Logical functions
        FunctionSignatureId::FnAnd as i32,
        FunctionSignatureId::FnOr as i32,
        FunctionSignatureId::FnNot as i32,
        // Comparisons
        FunctionSignatureId::FnGreater as i32,
        FunctionSignatureId::FnGreaterOrEqual as i32,
        FunctionSignatureId::FnLess as i32,
        FunctionSignatureId::FnLessOrEqual as i32,
        FunctionSignatureId::FnEqual as i32,
        FunctionSignatureId::FnStringLike as i32,
        FunctionSignatureId::FnIn as i32,
        FunctionSignatureId::FnBetween as i32,
        FunctionSignatureId::FnIsNull as i32,
        FunctionSignatureId::FnNotEqual as i32,
        // String functions
        FunctionSignatureId::FnConcatString as i32,
        FunctionSignatureId::FnStrposString as i32,
        FunctionSignatureId::FnLowerString as i32,
        FunctionSignatureId::FnUpperString as i32,
        FunctionSignatureId::FnLengthString as i32,
        FunctionSignatureId::FnStartsWithString as i32,
        FunctionSignatureId::FnEndsWithString as i32,
        FunctionSignatureId::FnSubstrString as i32,
        FunctionSignatureId::FnTrimString as i32,
        FunctionSignatureId::FnLtrimString as i32,
        FunctionSignatureId::FnRtrimString as i32,
        FunctionSignatureId::FnReplaceString as i32,
        FunctionSignatureId::FnRegexpExtractString as i32,
        FunctionSignatureId::FnRegexpReplaceString as i32,
        FunctionSignatureId::FnRegexpExtractAllString as i32,
        FunctionSignatureId::FnByteLengthString as i32,
        FunctionSignatureId::FnCharLengthString as i32,
        FunctionSignatureId::FnRegexpContainsString as i32,
        FunctionSignatureId::FnLpadString as i32,
        FunctionSignatureId::FnRpadString as i32,
        FunctionSignatureId::FnRepeatString as i32,
        FunctionSignatureId::FnReverseString as i32,
        // Control flow
        FunctionSignatureId::FnIf as i32,
        FunctionSignatureId::FnCaseNoValue as i32,
        FunctionSignatureId::FnCaseWithValue as i32,
        FunctionSignatureId::FnCoalesce as i32,
        FunctionSignatureId::FnIfnull as i32,
        // Time functions
        FunctionSignatureId::FnCurrentDate as i32,
        FunctionSignatureId::FnCurrentTimestamp as i32,
        FunctionSignatureId::FnDateAddDate as i32,
        FunctionSignatureId::FnTimestampAdd as i32,
        FunctionSignatureId::FnDateDiffDate as i32,
        FunctionSignatureId::FnTimestampDiff as i32,
        FunctionSignatureId::FnDateSubDate as i32,
        FunctionSignatureId::FnTimestampSub as i32,
        FunctionSignatureId::FnDateTruncDate as i32,
        FunctionSignatureId::FnTimestampTrunc as i32,
        FunctionSignatureId::FnDateFromUnixDate as i32,
        FunctionSignatureId::FnTimestampFromInt64Seconds as i32,
        FunctionSignatureId::FnTimestampFromInt64Millis as i32,
        FunctionSignatureId::FnTimestampFromInt64Micros as i32,
        FunctionSignatureId::FnTimestampFromUnixSecondsInt64 as i32,
        FunctionSignatureId::FnTimestampFromUnixSecondsTimestamp as i32,
        FunctionSignatureId::FnTimestampFromUnixMillisInt64 as i32,
        FunctionSignatureId::FnTimestampFromUnixMillisTimestamp as i32,
        FunctionSignatureId::FnTimestampFromUnixMicrosInt64 as i32,
        FunctionSignatureId::FnTimestampFromUnixMicrosTimestamp as i32,
        FunctionSignatureId::FnUnixDate as i32,
        FunctionSignatureId::FnUnixSecondsFromTimestamp as i32,
        FunctionSignatureId::FnUnixMillisFromTimestamp as i32,
        FunctionSignatureId::FnUnixMicrosFromTimestamp as i32,
        FunctionSignatureId::FnDateFromYearMonthDay as i32,
        FunctionSignatureId::FnTimestampFromString as i32,
        FunctionSignatureId::FnExtractFromDate as i32,
        FunctionSignatureId::FnExtractFromTimestamp as i32,
        FunctionSignatureId::FnExtractDateFromTimestamp as i32,
        // Aggregate functions
        FunctionSignatureId::FnCountStar as i32,
        FunctionSignatureId::FnAnyValue as i32,
        FunctionSignatureId::FnAvgInt64 as i32,
        FunctionSignatureId::FnAvgDouble as i32,
        FunctionSignatureId::FnCount as i32,
        FunctionSignatureId::FnMax as i32,
        FunctionSignatureId::FnMin as i32,
        FunctionSignatureId::FnSumInt64 as i32,
        FunctionSignatureId::FnSumDouble as i32,
        FunctionSignatureId::FnLogicalAnd as i32,
        FunctionSignatureId::FnLogicalOr as i32,
    ]
}
