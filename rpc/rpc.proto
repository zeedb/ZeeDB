syntax = "proto2";

package rpc;

service Coordinator {
  rpc Check (CheckRequest) returns (CheckResponse) {}
  rpc Query (QueryRequest) returns (QueryResponse) {}
  rpc Statement (QueryRequest) returns (StatementResponse) {}
  rpc Trace (TraceRequest) returns (TraceResponse) {}
}

message QueryRequest {
  required string sql = 1;
  map<string, Parameter> variables = 2;
  required int64 catalog_id = 3;
  optional int64 txn = 4;
}

message Parameter {
  required bool is_null = 1;
  oneof any {
    bool bool = 2;
    int64 i64 = 3;
    double f64 = 4;
    int32 date = 5;
    int64 timestamp = 6;
    string string = 7;
  }
}

message QueryResponse {
  required int64 txn = 1;
  required bytes record_batch = 2;
}

message StatementResponse {
  required int64 txn = 1;
  required uint64 rows_modified = 2;
}

message TraceRequest {
  required int64 txn = 1;
}

message TraceResponse {
  repeated TraceStage stages = 1;
}

message TraceStage {
  required int32 stage = 1;
  optional int32 worker = 2;
  repeated TraceSpan spans = 3;
}

message TraceSpan {
  required string name = 1;
  required uint64 start = 2;
  required uint64 end = 3;
}

service Worker {
  rpc Check (CheckRequest) returns (CheckResponse) {}
  rpc Gather (GatherRequest) returns (stream Page) {}
  rpc Broadcast (BroadcastRequest) returns (stream Page) {}
  rpc Exchange (ExchangeRequest) returns (stream Page) {}
  rpc Statistics(StatisticsRequest) returns (StatisticsResponse) {}
  rpc Trace (TraceRequest) returns (TraceResponse) {}
}

message CheckRequest {}
message CheckResponse {}

message GatherRequest {
  required int64 txn = 1;
  required int32 stage = 2;
  required bytes expr = 3;
}

message BroadcastRequest {
  required int64 txn = 1;
  required int32 stage = 2;
  required bytes expr = 3;
}

message ExchangeRequest {
  required int64 txn = 1;
  required int32 stage = 2;
  required bytes expr = 3;
  required string hash_column = 4;
  required int32 hash_bucket = 5;
}

message StatisticsRequest {
  required int64 table_id = 1;
}

message StatisticsResponse {
  required bytes table_statistics = 1;
}

message Page {
  oneof part {
    bytes record_batch = 1;
    string error = 2;
  }
}