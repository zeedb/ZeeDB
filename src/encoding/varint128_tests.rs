use super::varint128::{read, write, MAX_LEN};

macro_rules! assert_round_trip {
    ($input:expr, $bytes:expr) => {
        let mut buf = [0 as u8; MAX_LEN];
        let size = $bytes.len();
        assert_eq!(size, read($input, &mut buf));
        let mut output = 0 as i128;
        assert_eq!(size, write(&mut output, &buf[..]));
        assert_eq!($input, output);
    };
}

#[test]
fn test_round_trip() {
    assert_round_trip!(1, [0b10]);
    assert_round_trip!(0b_0111111_1111111_1111111_1111111_1111111_1111111_1111111_1111111, [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111110]);
    assert_round_trip!(0b_1111111_1111111_1111111_1111111_1111111_1111111_1111111_1111111, [0b10000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111110]);
    assert_round_trip!(0b_1000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000, [0b10000001, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b00000000]);
    assert_round_trip!(std::i128::MAX, [0b10000011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111110]);

    assert_round_trip!(-1, [0b01]);
    assert_round_trip!(-0b_0111111_1111111_1111111_1111111_1111111_1111111_1111111_1111111, [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111101]);
    assert_round_trip!(-0b_1111111_1111111_1111111_1111111_1111111_1111111_1111111_1111111, [0b10000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111101]);
    assert_round_trip!(-0b_1000000_0000000_0000000_0000000_0000000_0000000_0000000_0000000, [0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111111]);
    assert_round_trip!(std::i128::MIN, [0b10000011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111101]);
}