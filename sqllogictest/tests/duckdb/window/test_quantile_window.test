# name: test/sql/window/test_quantile_window.test
# description: Test MEDIAN and QUANTILE aggregates as window functions
# group: [window]

require vector_size 512

statement ok
PRAGMA enable_verification

statement ok
create table quantiles as select range r from range(10) union all values (NULL), (NULL), (NULL);

query III
SELECT r % 2, r, median(r) over (partition by r % 2 order by r) FROM quantiles ORDER BY 1, 2
----
NULL	NULL	NULL
NULL	NULL	NULL
NULL	NULL	NULL
0	0	0.000000
0	2	1.000000
0	4	2.000000
0	6	3.000000
0	8	4.000000
1	1	1.000000
1	3	2.000000
1	5	3.000000
1	7	4.000000
1	9	5.000000

query II
SELECT r, median(r) over (order by r rows between 1 preceding and 1 following) FROM quantiles ORDER BY 1, 2
----
NULL	NULL
NULL	NULL
NULL	0.000000
0	0.500000
1	1.000000
2	2.000000
3	3.000000
4	4.000000
5	5.000000
6	6.000000
7	7.000000
8	8.000000
9	8.500000

query II
SELECT r, median(r) over (order by r rows between 1 preceding and 3 following) FROM quantiles ORDER BY 1, 2
----
NULL	0.000000
NULL	0.500000
NULL	1.000000
0	1.500000
1	2.000000
2	3.000000
3	4.000000
4	5.000000
5	6.000000
6	7.000000
7	7.500000
8	8.000000
9	8.500000

query II
SELECT r, quantile(r, 0.5) over (order by r rows between 1 preceding and 3 following) FROM quantiles ORDER BY 1, 2
----
NULL	0
NULL	0
NULL	1
0	1
1	2
2	3
3	4
4	5
5	6
6	7
7	7
8	8
9	8

# Scattered NULLs
query IIII
SELECT r % 3, r, n, median(n) over (partition by r % 3 order by r)
FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM quantiles) nulls
ORDER BY 1, 2
----
NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL
0	0	0	0.000000
0	3	NULL	0.000000
0	6	6	3.000000
0	9	NULL	3.000000
1	1	NULL	NULL
1	4	4	4.000000
1	7	NULL	4.000000
2	2	2	2.000000
2	5	NULL	2.000000
2	8	8	5.000000

query III
SELECT r, n, median(n) over (order by r rows between 1 preceding and 1 following)
FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM quantiles) nulls
ORDER BY 1
----
NULL	NULL	NULL
NULL	NULL	NULL
NULL	NULL	0.000000
0	0	0.000000
1	NULL	1.000000
2	2	2.000000
3	NULL	3.000000
4	4	4.000000
5	NULL	5.000000
6	6	6.000000
7	NULL	7.000000
8	8	8.000000
9	NULL	8.000000

query III
SELECT r, n, median(n) over (order by r rows between 1 preceding and 3 following)
FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM quantiles) nulls
ORDER BY 1
----
NULL	NULL	0.000000
NULL	NULL	0.000000
NULL	NULL	1.000000
0	0	1.000000
1	NULL	2.000000
2	2	3.000000
3	NULL	4.000000
4	4	5.000000
5	NULL	6.000000
6	6	7.000000
7	NULL	7.000000
8	8	8.000000
9	NULL	8.000000

query III
SELECT r, n, median(n) over (order by r rows between unbounded preceding and unbounded following)
FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM quantiles) nulls
ORDER BY 1
----
NULL	NULL	4
NULL	NULL	4
NULL	NULL	4
0	0	4
1	NULL	4
2	2	4
3	NULL	4
4	4	4
5	NULL	4
6	6	4
7	NULL	4
8	8	4
9	NULL	4
