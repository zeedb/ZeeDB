# name: test/sql/aggregate/group/test_group_by_alias.test
# description: Test aliases in group by/aggregation
# group: [group]

statement ok
CREATE TABLE integers(i INTEGER)

statement ok
INSERT INTO integers VALUES (1), (2), (3), (NULL)

# use alias in HAVING clause
# CONTROVERSIAL: this query DOES NOT work in PostgreSQL
query IR
SELECT mod(i, 2) AS k, SUM(i) FROM integers WHERE i IS NOT NULL GROUP BY k HAVING k>0;
----
1
4

# this is identical to this query
# CONTROVERSIAL: this query does work in Postgres
statement error
SELECT mod(i, 2) AS k, SUM(i) FROM integers WHERE i IS NOT NULL GROUP BY k HAVING mod(i, 2)>0;

# select groups by constant (similar to order by constant)
query IR
SELECT mod(i, 2) AS k, SUM(i) FROM integers WHERE i IS NOT NULL GROUP BY 1 HAVING k>0;
----
1
4

# constant out of range
statement error
SELECT mod(i, 2) AS k, SUM(i) FROM integers WHERE i IS NOT NULL GROUP BY 42 HAVING k>0;

# entry in GROUP BY should refer to base column
# ...BUT the alias in ORDER BY should refer to the alias from the select list
# note that both Postgres and MonetDB reject this query because of ambiguity. SQLite accepts it though.
statement error
SELECT i, mod(i, 2) AS i, SUM(i) FROM integers GROUP BY i ORDER BY i, 3;

# changing the name of the alias makes it more explicit what should happen
query IIR
SELECT i, mod(i, 2) AS k, SUM(i) FROM integers GROUP BY i ORDER BY k, 3;
----
NULL
NULL
NULL
2
0
2
1
1
1
3
1
3

# this now orders by the actual grouping column
query IIR
SELECT i, mod(i, 2) AS k, SUM(i) FROM integers GROUP BY i ORDER BY i;
----
NULL
NULL
NULL
1
1
1
2
0
2
3
1
3

# cannot use GROUP BY column in an aggregation...
statement error
SELECT mod(i, 2) AS k, SUM(k) FROM integers GROUP BY k

# ...unless it is one of the base columns
query IR
SELECT i, SUM(i) FROM integers GROUP BY i ORDER BY i
----
NULL
NULL
1
1
2
2
3
3

# ORDER on a non-grouping column
# this query is refused by Postgres and MonetDB
# but SQLite resolves it by first pushing a "ANY_VALUE(i)" aggregate into the projection, and then ordering by that
# aggregate
statement error
SELECT (10-i) AS k, SUM(i) FROM integers GROUP BY k ORDER BY i;

# we can manually get this behavior by pushing ANY_VALUE
query IR
SELECT (10-i) AS k, SUM(i) FROM integers GROUP BY k ORDER BY ANY_VALUE(i);
----
NULL
NULL
9
1
8
2
7
3

