# test_math_i64
> select 1 + 1
$col1
2    

> select 1 + cast(null as int64)
$col1
NULL 

> select 2 * 3
$col1
6    

> select 2 * cast(null as int64)
$col1
NULL 

> select 1 - 2
$col1
-1   

> select 1 - cast(null as int64)
$col1
NULL 

> select -1
$col1
-1   

> select -cast(null as int64)
$col1
NULL 

> select abs(-1)
$col1
1    

> select sign(-10)
$col1
-1   

# test_math_f64
> select 1.0 + 1.0
$col1
2.000

> select 1.0 + cast(null as float64)
$col1
NULL 

> select 2.0 * 3.0
$col1
6.000

> select 2.0 * cast(null as float64)
$col1
NULL 

> select 1.0 - 2.0
$col1 
-1.000

> select 1.0 - cast(null as float64)
$col1
NULL 

> select -1.0
$col1 
-1.000

> select -cast(null as float64)
$col1
NULL 

> select abs(-1.0)
$col1
1.000

> select abs(cast(null as float64))
$col1
NULL 

> select sign(-10.0)
$col1 
-1.000

> select sign(cast(null as float64))
$col1
NULL 

> select round(-1.4)
$col1 
-1.000

> select round(-1.5)
$col1 
-2.000

> select round(-1.6)
$col1 
-2.000

> select round(cast(null as float64))
$col1
NULL 

> select round(-1.14, 1)
$col1 
-1.100

> select round(-1.15, 1)
$col1 
-1.200

> select round(-1.16, 1)
$col1 
-1.200

> select round(cast(null as float64))
$col1
NULL 

> select trunc(-1.4)
$col1 
-1.000

> select trunc(-1.5)
$col1 
-1.000

> select trunc(-1.6)
$col1 
-1.000

> select trunc(-1.14, 1)
$col1 
-1.100

> select trunc(-1.15, 1)
$col1 
-1.100

> select trunc(-1.16, 1)
$col1 
-1.100

> select trunc(cast(null as float64))
$col1
NULL 

> select ceil(-1.4)
$col1 
-1.000

> select ceil(-1.5)
$col1 
-1.000

> select ceil(-1.6)
$col1 
-1.000

> select ceil(cast(null as float64))
$col1
NULL 

> select floor(-1.4)
$col1 
-2.000

> select floor(-1.5)
$col1 
-2.000

> select floor(-1.6)
$col1 
-2.000

> select floor(cast(null as float64))
$col1
NULL 

> select sqrt(4.0)
$col1
2.000

> select sqrt(cast(null as float64))
$col1
NULL 

> select pow(2.0, 2.0)
$col1
4.000

> select pow(cast(null as float64), 2.0)
$col1
NULL 

> select pow(2.0, cast(null as float64))
$col1
NULL 

> select exp(0.0)
$col1
1.000

> select exp(cast(null as float64))
$col1
NULL 

> select ln(exp(0.0))
$col1
0.000

> select ln(cast(null as float64))
$col1
NULL 

> select log10(10.0)
$col1
1.000

> select log10(cast(null as float64))
$col1
NULL 

> select log(exp(0.0))
$col1
0.000

> select log(cast(null as float64))
$col1
NULL 

> select log(4.0, 2.0)
$col1
2.000

> select log(cast(null as float64), 2.0)
$col1
NULL 

> select cos(0.5)
$col1
0.878

> select cos(cast(null as float64))
$col1
NULL 

> select cosh(0.5)
$col1
1.128

> select cosh(cast(null as float64))
$col1
NULL 

> select acos(0.5)
$col1
1.047

> select acos(cast(null as float64))
$col1
NULL 

> select acosh(100.0)
$col1
5.298

> select acosh(cast(null as float64))
$col1
NULL 

> select sin(0.5)
$col1
0.479

> select sin(cast(null as float64))
$col1
NULL 

> select sinh(0.5)
$col1
0.521

> select sinh(cast(null as float64))
$col1
NULL 

> select asin(0.5)
$col1
0.524

> select asin(cast(null as float64))
$col1
NULL 

> select asinh(100.0)
$col1
5.298

> select asinh(cast(null as float64))
$col1
NULL 

> select tan(0.5)
$col1
0.546

> select tan(cast(null as float64))
$col1
NULL 

> select tanh(0.5)
$col1
0.462

> select tanh(cast(null as float64))
$col1
NULL 

> select atan(0.5)
$col1
0.464

> select atan(cast(null as float64))
$col1
NULL 

> select atanh(0.5)
$col1
0.549

> select atanh(cast(null as float64))
$col1
NULL 

> select atan2(0.5, 20.0)
$col1
0.025

> select atan2(cast(null as float64), 20.0)
$col1
NULL 

# test_string_bool_functions
> select 'foobar' like 'foo%'
$col1
true 

> select 'foobar' like 'bar%'
$col1
false

> select cast(null as string) like 'foo%'
$col1
NULL 

> select starts_with('foobar', 'foo')
$col1
true 

> select starts_with('foobar', 'bar')
$col1
false

> select starts_with(null, 'foo')
$col1
NULL 

> select starts_with('foobar', null)
$col1
NULL 

> select ends_with('foobar', 'foo')
$col1
false

> select ends_with('foobar', 'bar')
$col1
true 

> select ends_with(null, 'foo')
$col1
NULL 

> select ends_with('foobar', null)
$col1
NULL 

> select regexp_contains('foo@example.com', r'@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+')
$col1
true 

> select regexp_contains('www.example.net', r'@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+')
$col1
false

> select regexp_contains(null, r'@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+')
$col1
NULL 

# test_string_i64_functions
> select strpos('foobar', 'bar')
$col1
4    

> select length('foobar')
$col1
6    

> select length(null)
$col1
NULL 

> select byte_length('абвгд')
$col1
10   

> select byte_length('foo')
$col1
3    

> select byte_length(null)
$col1
NULL 

> select char_length('абвгд')
$col1
5    

> select char_length('foo')
$col1
3    

> select char_length(null)
$col1
NULL 

> select strpos(null, 'bar')
$col1
NULL 

> select strpos('foobar', null)
$col1
NULL 

# test_string_string_functions
> select concat('foo', 'bar', 'baz')
$col1    
foobarbaz

> select concat('foo', null)
$col1
NULL 

> select lower('FOO')
$col1
foo  

> select lower('foo')
$col1
foo  

> select lower(null)
$col1
NULL 

> select upper('FOO')
$col1
FOO  

> select upper('foo')
$col1
FOO  

> select upper(null)
$col1
NULL 

> select substr('foobar', 4)
$col1
bar  

> select substr('foobar', 4, 3)
$col1
bar  

> select substr('foobar', 4, 10)
$col1
bar  

> select substr('foobar', 10)
$col1
     

> select substr(null, 3)
$col1
NULL 

> select trim(' foo ')
$col1
foo  

> select ltrim(' foo ')
$col1
foo  

> select rtrim(' foo ')
$col1
 foo 

> select trim('xfooy', 'xyz')
$col1
foo  

> select ltrim('xfooy', 'xyz')
$col1
fooy 

> select rtrim('xfooy', 'xyz')
$col1
xfoo 

> select replace('foobar', 'bar', 'baz')
$col1 
foobaz

> select regexp_extract('foo@bar.com', r'^[a-zA-Z0-9_.+-]+')
$col1
foo  

> select regexp_replace('# Heading', r'^# ([a-zA-Z0-9\s]+$)', '(h1)\\1(/h1)')
$col1           
(h1)Heading(/h1)

> select regexp_replace('foo', r'(foo)', '\\bar')
ERROR: Invalid REGEXP_REPLACE pattern

> select regexp_replace('foo', r'(foo)', 'bar\\')
ERROR: REGEXP_REPLACE pattern ends with \

> select lpad('foo', 6)
$col1 
   foo

> select lpad('foo', 6, 'bar')
$col1 
barfoo

> select rpad('foo', 6)
$col1 
foo   

> select rpad('foo', 6, 'bar')
$col1 
foobar

> select left('foobar', 3)
$col1
foo  

> select left(null, 3)
$col1
NULL 

> select left('foobar', null)
$col1
NULL 

> select right('foobar', 3)
$col1
bar  

> select right(null, 3)
$col1
NULL 

> select right('foobar', null)
$col1
NULL 

> select repeat('foo', 3)
$col1    
foofoofoo

> select reverse('foo')
$col1
oof  

> select chr(65)
$col1
A    

> select chr(255)
$col1
ÿ    

> select chr(513)
$col1
ȁ    

> select chr(1024)
$col1
Ѐ    

> select chr(null)
$col1
NULL 

# test_date_functions
> select current_date() > date '2020-01-01'
$col1
true 

> select date_add(date '2020-01-01', interval 1 day)
$col1     
2020-01-02

> select date_add(date '2020-01-01', interval 1 week)
$col1     
2020-01-08

> select date_add(date '2020-01-01', interval 1 month)
$col1     
2020-02-01

> select date_add(date '2020-01-01', interval 100 month)
$col1     
2028-05-01

> select date_add(date '2020-01-01', interval 1 year)
$col1     
2021-01-01

> select date_sub(date '2020-01-01', interval 1 day)
$col1     
2019-12-31

> select date_sub(date '2020-01-01', interval 1 week)
$col1     
2019-12-25

> select date_sub(date '2020-01-01', interval 1 month)
$col1     
2019-12-01

> select date_sub(date '2020-01-01', interval 100 month)
$col1     
2011-09-01

> select date_sub(date '2020-01-01', interval 1 year)
$col1     
2019-01-01

> select date_diff(date '2020-01-01', date '2020-01-10', day)
$col1
-9   

> select date_trunc(date '2008-12-25', month)
$col1     
2008-12-01

> select date_from_unix_date(14238)
$col1     
2008-12-25

> select unix_date(date '2008-12-25')
$col1
14238

> select date(2020, 1, 1)
$col1     
2020-01-01

> select date(timestamp '2020-01-01')
$col1     
2020-01-01

> select date(2020, 1, cast(null as int64))
$col1
NULL 

> select extract(dayofweek from date '2008-12-25')
$col1
5    

> select extract(day from date '2008-12-25')
$col1
25   

> select extract(dayofyear from date '2008-12-25')
$col1
360  

> select extract(week from date '2008-12-25')
$col1
51   

> select extract(week(sunday) from date '2008-12-25')
$col1
51   

> select extract(week(monday) from date '2008-12-25')
$col1
51   

> select extract(isoweek from date '2008-12-25')
$col1
52   

> select extract(month from date '2008-12-25')
$col1
12   

> select extract(quarter from date '2008-12-25')
$col1
4    

> select extract(year from date '2008-12-25')
$col1
2008 

> select extract(isoyear from date '2008-12-25')
$col1
2008 

> select format_date('%x', date '2008-12-25')
$col1   
12/25/08

> select format_date('%b-%d-%y', date '2008-12-25')
$col1    
Dec-25-08

> select format_date('%b %y', date '2008-12-25')
$col1 
Dec 08

> select format_date('%b %y', null)
$col1
NULL 

> select parse_date('%F', '2008-12-25')
$col1     
2008-12-25

> select parse_date('%x', '12/25/08')
$col1     
2008-12-25

> select parse_date('%Y%m%d', '20081225')
$col1     
2008-12-25

# test_timestamp_functions
> select current_timestamp() > timestamp '2020-01-01'
$col1
true 

> select timestamp_add(timestamp '2020-01-01', interval 1 day)
$col1              
2020-01-02 00:00:00

> select timestamp_add(timestamp '2020-01-01', interval 1 hour)
$col1              
2020-01-01 01:00:00

> select timestamp_add(timestamp '2020-01-01', interval 1 minute)
$col1              
2020-01-01 00:01:00

> select timestamp_add(timestamp '2020-01-01', interval 1 second)
$col1              
2020-01-01 00:00:01

> select timestamp_sub(timestamp '2020-01-01', interval 1 day)
$col1              
2019-12-31 00:00:00

> select timestamp_sub(timestamp '2020-01-01', interval 1 hour)
$col1              
2019-12-31 23:00:00

> select timestamp_sub(timestamp '2020-01-01', interval 1 minute)
$col1              
2019-12-31 23:59:00

> select timestamp_sub(timestamp '2020-01-01', interval 1 second)
$col1              
2019-12-31 23:59:59

> select timestamp_diff(timestamp '2020-01-01', timestamp '2020-01-10', hour)
$col1
-216 

> select timestamp_trunc(timestamp '2008-12-25 15:30:00+00', day)
$col1              
2008-12-25 00:00:00

> select timestamp_from_unix_micros(1230163200000000)
$col1              
2008-12-25 00:00:00

> select unix_micros(timestamp '2008-12-25 15:30:00+00')
$col1           
1230219000000000

> select timestamp(cast('2020-01-01T00:00:00+00:00' as string))
$col1              
2020-01-01 00:00:00

> select timestamp(date '2020-01-01')
$col1              
2020-01-01 00:00:00

> select timestamp(cast(null as string))
$col1
NULL 

> select extract(nanosecond from timestamp '2008-12-25')
ERROR: extract(NANOSECOND from _) is not supported

> select extract(microsecond from timestamp '2008-12-25')
$col1
0    

> select extract(millisecond from timestamp '2008-12-25')
$col1
0    

> select extract(second from timestamp '2008-12-25')
$col1
0    

> select extract(minute from timestamp '2008-12-25')
$col1
0    

> select extract(hour from timestamp '2008-12-25')
$col1
0    

> select extract(dayofweek from timestamp '2008-12-25')
$col1
5    

> select extract(day from timestamp '2008-12-25')
$col1
25   

> select extract(dayofyear from timestamp '2008-12-25')
$col1
360  

> select extract(week from timestamp '2008-12-25')
$col1
51   

> select extract(week(sunday) from timestamp '2008-12-25')
$col1
51   

> select extract(week(monday) from timestamp '2008-12-25')
$col1
51   

> select extract(isoweek from timestamp '2008-12-25')
$col1
52   

> select extract(month from timestamp '2008-12-25')
$col1
12   

> select extract(quarter from timestamp '2008-12-25')
$col1
4    

> select extract(year from timestamp '2008-12-25')
$col1
2008 

> select extract(isoyear from timestamp '2008-12-25')
$col1
2008 

> select extract(date from timestamp '2008-12-25')
$col1     
2008-12-25

> select string(timestamp '2008-12-25 15:30:00+00')
$col1                    
2008-12-25T15:30:00+00:00

> select string(cast(null as timestamp))
$col1
NULL 

> select format_timestamp('%b-%d-%y', timestamp '2008-12-25 15:30:00+00')
$col1    
Dec-25-08

> select format_timestamp('%b %y', timestamp '2008-12-25 15:30:00+00')
$col1 
Dec 08

> select format_timestamp('%b %y', null)
$col1
NULL 

> select parse_timestamp('%c', 'Thu Dec 25 07:30:00 2008')
$col1              
2008-12-25 07:30:00

> select parse_timestamp('%c', null)
$col1
NULL 

# test_comparisons
> select true and true
$col1
true 

> select true and false
$col1
false

> select true and cast(null as bool)
$col1
NULL 

> select 1.0 / 2.0
$col1
0.500

> select 2 > 1
$col1
true 

> select 1 > 2
$col1
false

> select 1 > cast(null as int64)
$col1
NULL 

> select 2 >= 1
$col1
true 

> select 1 >= 2
$col1
false

> select 1 >= cast(null as int64)
$col1
NULL 

> select 2 < 1
$col1
false

> select 1 < 2
$col1
true 

> select 1 < cast(null as int64)
$col1
NULL 

> select 2 <= 1
$col1
false

> select 1 <= 2
$col1
true 

> select 1 <= cast(null as int64)
$col1
NULL 

> select 1 = 1
$col1
true 

> select 1 = 2
$col1
false

> select 1 = cast(null as int64)
$col1
NULL 

> select 2 in (1, 2)
$col1
true 

> select 10 in (1, 2)
$col1
false

> select null in (1, 2)
$col1
NULL 

> select 1 between 1 and 2
$col1
true 

> select 2 between 1 and 2
$col1
true 

> select 3 between 1 and 2
$col1
false

> select null between 1 and 2
$col1
NULL 

> select 1 is null
$col1
false

> select cast(null as int64) is null
$col1
true 

> select true is true
$col1
true 

> select false is true
$col1
false

> select cast(null as bool) is true
$col1
false

> select true is false
$col1
false

> select false is false
$col1
true 

> select cast(null as bool) is false
$col1
false

> select not(true)
$col1
false

> select not(false)
$col1
true 

> select not(cast(null as bool))
$col1
NULL 

> select 1 <> 1
$col1
false

> select 1 <> 2
$col1
true 

> select 1 <> cast(null as int64)
$col1
NULL 

> select false or true
$col1
true 

> select false or false
$col1
false

> select false or cast(null as bool)
$col1
NULL 

> select true or cast(null as bool)
$col1
true 

> select is_inf(1.0)
$col1
false

> select is_inf(cast('inf' as float64))
$col1
true 

> select is_inf(cast(null as float64))
$col1
NULL 

> select is_nan(1.0)
$col1
false

> select is_nan(cast('NaN' as float64))
$col1
true 

> select is_nan(cast('inf' as float64))
$col1
false

> select is_nan(cast(null as float64))
$col1
NULL 

> select greatest(true, false, null)
$col1
NULL 

> select greatest(true, false)
$col1
true 

> select greatest(1, 2, null)
$col1
NULL 

> select greatest(1, 2)
$col1
2    

> select greatest(1.0, 2.0, null)
$col1
NULL 

> select greatest(1.0, 2.0)
$col1
2.000

> select greatest(date '2020-01-01', date '2020-01-02', null)
$col1
NULL 

> select greatest(date '2020-01-01', date '2020-01-02')
$col1     
2020-01-02

> select greatest(timestamp '2020-01-01', timestamp '2020-01-02', null)
$col1
NULL 

> select greatest(timestamp '2020-01-01', timestamp '2020-01-02')
$col1              
2020-01-02 00:00:00

> select greatest('foo', 'bar', null)
$col1
NULL 

> select greatest('foo', 'bar')
$col1
foo  

> select least(true, false, null)
$col1
NULL 

> select least(true, false)
$col1
false

> select least(1, 2, null)
$col1
NULL 

> select least(1, 2)
$col1
1    

> select least(1.0, 2.0, null)
$col1
NULL 

> select least(1.0, 2.0)
$col1
1.000

> select least(date '2020-01-01', date '2020-01-02', null)
$col1
NULL 

> select least(date '2020-01-01', date '2020-01-02')
$col1     
2020-01-01

> select least(timestamp '2020-01-01', timestamp '2020-01-02', null)
$col1
NULL 

> select least(timestamp '2020-01-01', timestamp '2020-01-02')
$col1              
2020-01-01 00:00:00

> select least('foo', 'bar', null)
$col1
NULL 

> select least('foo', 'bar')
$col1
bar  

# test_control_flow
> select case when true then 1 else 2 end
$col1
1    

> select case when false then 1 else 2 end
$col1
2    

> select case when null then 1 else 2 end
$col1
2    

> select case when false then 1 when false then 2 else 3 end
$col1
3    

> select case 1 when 1 then 'a' else 'b' end
$col1
a    

> select case 2 when 1 then 'a' else 'b' end
$col1
b    

> select case null when 1 then 'a' else 'b' end
$col1
b    

> select case 3 when 1 then 'a' when 2 then 'b' when 3 then 'c' else 'd' end
$col1
c    

> select if(true, 1, 2)
$col1
1    

> select if(false, 1, 2)
$col1
2    

> select if(null, 1, 2)
$col1
2    

> select coalesce(1, 2, null)
$col1
2    

> select coalesce(null, 2, null)
$col1
2    

> select ifnull(1, 2)
$col1
1    

> select ifnull(null, 2)
$col1
2    

> select ifnull(1, null)
$col1
1    

> select nullif('a', 'b')
$col1
a    

> select nullif('a', 'a')
$col1
NULL 

> select nullif(null, 'a')
$col1
NULL 

> select nullif('a', null)
$col1
a    

# test_casts
> select cast(t as int64) from (select true as t)
$col1
1    

> select cast(t as string) from (select true as t)
$col1
true 

> select cast(i1 as bool) from (select 1 as i1)
$col1
true 

> select cast(i1 as float64) from (select 1 as i1)
$col1
1.000

> select cast(i1 as string) from (select 1 as i1)
$col1
1    

> select cast(f1 as int64) from (select 1.0 as f1)
$col1
1    

> select cast(f1 as string) from (select 1.0 as f1)
$col1
1    

> select cast(d as timestamp) from (select date '2020-01-01' as d)
$col1              
2020-01-01 00:00:00

> select cast(d as string) from (select date '2020-01-01' as d)
$col1     
2020-01-01

> select cast(ts as date) from (select timestamp '2020-01-01' as ts)
$col1     
2020-01-01

> select cast(ts as string) from (select timestamp '2020-01-01' as ts)
$col1                    
2020-01-01T00:00:00+00:00

> select cast(t as bool) from (select 'true' as t)
$col1
true 

> select cast(i1 as int64) from (select '1' as i1)
$col1
1    

> select cast(f1 as float64) from (select '1.0' as f1)
$col1
1.000

> select cast(d as date) from (select '2020-01-01' as d)
$col1     
2020-01-01

> select cast(ts as timestamp) from (select '2020-01-01T00:00:00+00:00' as ts)
$col1              
2020-01-01 00:00:00

> select error('foo!')
ERROR: foo!

# Wrong number of args
> select abs()
ERROR: No matching signature for function ABS with no arguments. Supported signatures: ABS(INT64); ABS(DOUBLE)

